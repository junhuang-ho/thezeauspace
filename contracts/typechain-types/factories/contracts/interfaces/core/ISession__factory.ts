/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ISession,
  ISessionInterface,
} from "../../../../contracts/interfaces/core/ISession";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "getCurrentSessionData",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        internalType: "address",
        name: "_superToken",
        type: "address",
      },
    ],
    name: "getNewSessionNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        internalType: "address",
        name: "_superToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_nonce",
        type: "uint256",
      },
    ],
    name: "getSessionData",
    outputs: [
      {
        internalType: "int96",
        name: "",
        type: "int96",
      },
      {
        internalType: "uint96",
        name: "",
        type: "uint96",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_superToken",
        type: "address",
      },
      {
        internalType: "uint96",
        name: "_flowRate",
        type: "uint96",
      },
      {
        internalType: "uint256",
        name: "_tag",
        type: "uint256",
      },
    ],
    name: "startSession",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_superTokens",
        type: "address[]",
      },
      {
        internalType: "uint96[]",
        name: "_flowRates",
        type: "uint96[]",
      },
      {
        internalType: "uint256[]",
        name: "_tags",
        type: "uint256[]",
      },
    ],
    name: "startSessions",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_superToken",
        type: "address",
      },
    ],
    name: "stopSession",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_superTokens",
        type: "address[]",
      },
    ],
    name: "stopSessions",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class ISession__factory {
  static readonly abi = _abi;
  static createInterface(): ISessionInterface {
    return new utils.Interface(_abi) as ISessionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ISession {
    return new Contract(address, _abi, signerOrProvider) as ISession;
  }
}
