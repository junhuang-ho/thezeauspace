/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Test4Facet,
  Test4FacetInterface,
} from "../../../contracts/tests/Test4Facet";

const _abi = [
  {
    inputs: [],
    name: "test4Func1",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test4Func2",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060818061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806339fcc3fd14603757806383e1265214603f575b600080fd5b603d6047565b005b60456049565b005b565b56fea264697066735822122081fdc27a4d2eb955d894ad6f4158e570fdb7ee2bf9f648a3b627e2f0e2f30a5364736f6c63430008120033";

type Test4FacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Test4FacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Test4Facet__factory extends ContractFactory {
  constructor(...args: Test4FacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Test4Facet> {
    return super.deploy(overrides || {}) as Promise<Test4Facet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Test4Facet {
    return super.attach(address) as Test4Facet;
  }
  override connect(signer: Signer): Test4Facet__factory {
    return super.connect(signer) as Test4Facet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Test4FacetInterface {
    return new utils.Interface(_abi) as Test4FacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Test4Facet {
    return new Contract(address, _abi, signerOrProvider) as Test4Facet;
  }
}
