/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Test3Facet,
  Test3FacetInterface,
} from "../../../contracts/tests/Test3Facet";

const _abi = [
  {
    inputs: [],
    name: "test3Func1",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "test3Func2",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060ca8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063e7bf600f146037578063ebfa4bcc14603f575b600080fd5b603d6059565b005b6045605b565b60405160509190607b565b60405180910390f35b565b60006001905090565b6000819050919050565b6075816064565b82525050565b6000602082019050608e6000830184606e565b9291505056fea264697066735822122023e56e5cd3a0f4cc243017303e76ff1d35a3b89806ce219a3b1b35f87550079764736f6c63430008120033";

type Test3FacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Test3FacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Test3Facet__factory extends ContractFactory {
  constructor(...args: Test3FacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Test3Facet> {
    return super.deploy(overrides || {}) as Promise<Test3Facet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Test3Facet {
    return super.attach(address) as Test3Facet;
  }
  override connect(signer: Signer): Test3Facet__factory {
    return super.connect(signer) as Test3Facet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Test3FacetInterface {
    return new utils.Interface(_abi) as Test3FacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Test3Facet {
    return new Contract(address, _abi, signerOrProvider) as Test3Facet;
  }
}
