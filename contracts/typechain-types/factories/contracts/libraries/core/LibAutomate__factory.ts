/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  LibAutomate,
  LibAutomateInterface,
} from "../../../../contracts/libraries/core/LibAutomate";

const _abi = [
  {
    inputs: [],
    name: "AUTOBOT_PROXY_FACTORY",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "GELATO_FEE",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x610131610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610603c5760003560e01c8062b0f9f4146041578063f2f3e19c14605b575b600080fd5b60476075565b6040516052919060e2565b60405180910390f35b6061608d565b604051606c919060e2565b60405180910390f35b73c815db16d4be6ddf2685c201937905abf338f5d781565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060ce8260a5565b9050919050565b60dc8160c5565b82525050565b600060208201905060f5600083018460d5565b9291505056fea2646970667358221220cc20beaa9962a09ce85ddbc7cf6c22fac21af4cf9b31e8e5e34576fedc95ec3764736f6c63430008120033";

type LibAutomateConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LibAutomateConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LibAutomate__factory extends ContractFactory {
  constructor(...args: LibAutomateConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LibAutomate> {
    return super.deploy(overrides || {}) as Promise<LibAutomate>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LibAutomate {
    return super.attach(address) as LibAutomate;
  }
  override connect(signer: Signer): LibAutomate__factory {
    return super.connect(signer) as LibAutomate__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibAutomateInterface {
    return new utils.Interface(_abi) as LibAutomateInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibAutomate {
    return new Contract(address, _abi, signerOrProvider) as LibAutomate;
  }
}
