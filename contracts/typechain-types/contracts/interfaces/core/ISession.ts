/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ISessionInterface extends utils.Interface {
  functions: {
    "getCurrentSessionData(address)": FunctionFragment;
    "getNewSessionNonce(address,address)": FunctionFragment;
    "getSessionData(address,address,uint256)": FunctionFragment;
    "startSession(address,uint96,uint256)": FunctionFragment;
    "startSessions(address[],uint96[],uint256[])": FunctionFragment;
    "stopSession(address)": FunctionFragment;
    "stopSessions(address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getCurrentSessionData"
      | "getNewSessionNonce"
      | "getSessionData"
      | "startSession"
      | "startSessions"
      | "stopSession"
      | "stopSessions"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getCurrentSessionData",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNewSessionNonce",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSessionData",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "startSession",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "startSessions",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stopSession",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stopSessions",
    values: [PromiseOrValue<string>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "getCurrentSessionData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNewSessionNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSessionData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startSessions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopSessions",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ISession extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISessionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getCurrentSessionData(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string[]]>;

    getNewSessionNonce(
      _user: PromiseOrValue<string>,
      _superToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSessionData(
      _user: PromiseOrValue<string>,
      _superToken: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    startSession(
      _superToken: PromiseOrValue<string>,
      _flowRate: PromiseOrValue<BigNumberish>,
      _tag: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startSessions(
      _superTokens: PromiseOrValue<string>[],
      _flowRates: PromiseOrValue<BigNumberish>[],
      _tags: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stopSession(
      _superToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stopSessions(
      _superTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getCurrentSessionData(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string[]]>;

  getNewSessionNonce(
    _user: PromiseOrValue<string>,
    _superToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSessionData(
    _user: PromiseOrValue<string>,
    _superToken: PromiseOrValue<string>,
    _nonce: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  startSession(
    _superToken: PromiseOrValue<string>,
    _flowRate: PromiseOrValue<BigNumberish>,
    _tag: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startSessions(
    _superTokens: PromiseOrValue<string>[],
    _flowRates: PromiseOrValue<BigNumberish>[],
    _tags: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stopSession(
    _superToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stopSessions(
    _superTokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getCurrentSessionData(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string[]]>;

    getNewSessionNonce(
      _user: PromiseOrValue<string>,
      _superToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSessionData(
      _user: PromiseOrValue<string>,
      _superToken: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    startSession(
      _superToken: PromiseOrValue<string>,
      _flowRate: PromiseOrValue<BigNumberish>,
      _tag: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    startSessions(
      _superTokens: PromiseOrValue<string>[],
      _flowRates: PromiseOrValue<BigNumberish>[],
      _tags: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    stopSession(
      _superToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stopSessions(
      _superTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getCurrentSessionData(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNewSessionNonce(
      _user: PromiseOrValue<string>,
      _superToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSessionData(
      _user: PromiseOrValue<string>,
      _superToken: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startSession(
      _superToken: PromiseOrValue<string>,
      _flowRate: PromiseOrValue<BigNumberish>,
      _tag: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startSessions(
      _superTokens: PromiseOrValue<string>[],
      _flowRates: PromiseOrValue<BigNumberish>[],
      _tags: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stopSession(
      _superToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stopSessions(
      _superTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getCurrentSessionData(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNewSessionNonce(
      _user: PromiseOrValue<string>,
      _superToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSessionData(
      _user: PromiseOrValue<string>,
      _superToken: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startSession(
      _superToken: PromiseOrValue<string>,
      _flowRate: PromiseOrValue<BigNumberish>,
      _tag: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startSessions(
      _superTokens: PromiseOrValue<string>[],
      _flowRates: PromiseOrValue<BigNumberish>[],
      _tags: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stopSession(
      _superToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stopSessions(
      _superTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
