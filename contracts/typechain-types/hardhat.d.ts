/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC1271",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1271__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC777",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC777__factory>;
    getContractFactory(
      name: "IConstantFlowAgreementV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IConstantFlowAgreementV1__factory>;
    getContractFactory(
      name: "IInstantDistributionAgreementV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInstantDistributionAgreementV1__factory>;
    getContractFactory(
      name: "ISuperAgreement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISuperAgreement__factory>;
    getContractFactory(
      name: "ISuperApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISuperApp__factory>;
    getContractFactory(
      name: "ISuperfluid",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISuperfluid__factory>;
    getContractFactory(
      name: "ISuperfluidGovernance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISuperfluidGovernance__factory>;
    getContractFactory(
      name: "ISuperfluidToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISuperfluidToken__factory>;
    getContractFactory(
      name: "ISuperToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISuperToken__factory>;
    getContractFactory(
      name: "ISuperTokenFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISuperTokenFactory__factory>;
    getContractFactory(
      name: "ERC20WithTokenInfo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20WithTokenInfo__factory>;
    getContractFactory(
      name: "TokenInfo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenInfo__factory>;
    getContractFactory(
      name: "Diamond",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Diamond__factory>;
    getContractFactory(
      name: "Automate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Automate__factory>;
    getContractFactory(
      name: "Control",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Control__factory>;
    getContractFactory(
      name: "Flow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Flow__factory>;
    getContractFactory(
      name: "Session",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Session__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "Cut",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Cut__factory>;
    getContractFactory(
      name: "Loupe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Loupe__factory>;
    getContractFactory(
      name: "Utility",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Utility__factory>;
    getContractFactory(
      name: "IAutomate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAutomate__factory>;
    getContractFactory(
      name: "IControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IControl__factory>;
    getContractFactory(
      name: "IFlow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFlow__factory>;
    getContractFactory(
      name: "ISession",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISession__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "ICut",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICut__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "ILoupe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILoupe__factory>;
    getContractFactory(
      name: "IUtility",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUtility__factory>;
    getContractFactory(
      name: "LibAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibAccessControl__factory>;
    getContractFactory(
      name: "LibDiamond",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibDiamond__factory>;
    getContractFactory(
      name: "IAutomate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAutomate__factory>;
    getContractFactory(
      name: "IOpsProxyFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOpsProxyFactory__factory>;
    getContractFactory(
      name: "ITaskTreasuryUpgradable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITaskTreasuryUpgradable__factory>;
    getContractFactory(
      name: "InitTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InitTest__factory>;
    getContractFactory(
      name: "Test1Facet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Test1Facet__factory>;
    getContractFactory(
      name: "Test2Facet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Test2Facet__factory>;
    getContractFactory(
      name: "Test3Facet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Test3Facet__factory>;
    getContractFactory(
      name: "Test3Facet2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Test3Facet2__factory>;
    getContractFactory(
      name: "Test4Facet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Test4Facet__factory>;
    getContractFactory(
      name: "Test5Facet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Test5Facet__factory>;
    getContractFactory(
      name: "DiamondInit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DiamondInit__factory>;

    getContractAt(
      name: "IERC1271",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1271>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC777",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC777>;
    getContractAt(
      name: "IConstantFlowAgreementV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IConstantFlowAgreementV1>;
    getContractAt(
      name: "IInstantDistributionAgreementV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInstantDistributionAgreementV1>;
    getContractAt(
      name: "ISuperAgreement",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISuperAgreement>;
    getContractAt(
      name: "ISuperApp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISuperApp>;
    getContractAt(
      name: "ISuperfluid",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISuperfluid>;
    getContractAt(
      name: "ISuperfluidGovernance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISuperfluidGovernance>;
    getContractAt(
      name: "ISuperfluidToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISuperfluidToken>;
    getContractAt(
      name: "ISuperToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISuperToken>;
    getContractAt(
      name: "ISuperTokenFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISuperTokenFactory>;
    getContractAt(
      name: "ERC20WithTokenInfo",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20WithTokenInfo>;
    getContractAt(
      name: "TokenInfo",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenInfo>;
    getContractAt(
      name: "Diamond",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Diamond>;
    getContractAt(
      name: "Automate",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Automate>;
    getContractAt(
      name: "Control",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Control>;
    getContractAt(
      name: "Flow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Flow>;
    getContractAt(
      name: "Session",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Session>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "Cut",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Cut>;
    getContractAt(
      name: "Loupe",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Loupe>;
    getContractAt(
      name: "Utility",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Utility>;
    getContractAt(
      name: "IAutomate",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAutomate>;
    getContractAt(
      name: "IControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IControl>;
    getContractAt(
      name: "IFlow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFlow>;
    getContractAt(
      name: "ISession",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISession>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "ICut",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICut>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "ILoupe",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILoupe>;
    getContractAt(
      name: "IUtility",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUtility>;
    getContractAt(
      name: "LibAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibAccessControl>;
    getContractAt(
      name: "LibDiamond",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibDiamond>;
    getContractAt(
      name: "IAutomate",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAutomate>;
    getContractAt(
      name: "IOpsProxyFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOpsProxyFactory>;
    getContractAt(
      name: "ITaskTreasuryUpgradable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITaskTreasuryUpgradable>;
    getContractAt(
      name: "InitTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InitTest>;
    getContractAt(
      name: "Test1Facet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Test1Facet>;
    getContractAt(
      name: "Test2Facet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Test2Facet>;
    getContractAt(
      name: "Test3Facet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Test3Facet>;
    getContractAt(
      name: "Test3Facet2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Test3Facet2>;
    getContractAt(
      name: "Test4Facet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Test4Facet>;
    getContractAt(
      name: "Test5Facet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Test5Facet>;
    getContractAt(
      name: "DiamondInit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DiamondInit>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
